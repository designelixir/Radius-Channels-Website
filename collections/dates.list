<script>
	function isDateInFutureOrPast(start, end, id) {
	  const today = new Date();
	  console.log(id)
	  var targetId = id;
	  const startDate = new Date(start)
	  const endDate = new Date(end)
	  console.log(start,  end)
	  
	
	
	  if (startDate > today) {
	    console.log("upcoming")
	  } else if (startDate < today && endDate > today){
	
	    console.log("current")
	  } else if (startDate < today) {
	    
	    console.log("past")
	  }  else {
	    console.log("no event defined")
	  }
	}
	
	function toggleTypes(toggleType){
	  var typeToggles = document.getElementsByClassName('type-toggle'); 
	  for (var i = 0; i < typeToggles.length; i++){
	    typeToggles[i].classList.remove('active-type-toggle')
	  }
	  document.getElementById(toggleType).classList.add('active-type-toggle')
	}
	
		function toggleEvent(target, fullUrl){
	    var targetIframe = document.getElementById('target-iframe');
      header = targetIframe.contentDocument.querySelector("header");
      header.remove();
	    var targetUrl = "https://radiuschannels2.squarespace.com" + String(fullUrl)
		  var targetDiv = document.getElementById(target);
		  var allDivs = document.getElementsByClassName('active-event')
	    
	
		  for (i=0; i < allDivs.length; i++){
		      allDivs[i].classList.remove('active-event')
		  }
	
		    targetDiv.classList.add('active-event')
	      targetIframe.src = targetUrl
	      
		}
</script>
<header class="site-header">
	<squarespace:navigation navigationId="siteNav" template="site-navigation" />
</header>
<div id='site-wrapper'>
	{.section website}
	<div {.if collection.mainImage} style="background-image: url({collection.mainImage.assetUrl})" class="user-set-bg page-header"{.or} class="page-header" {.end}>
	<div class="page-header-content">
		<div>
			<h1 class="site-title-heading" data-content-field="site-title" {.if collection.mainImage} style="color: white" {.end}>
			{collection.title}
			</h1>
			<br>
			<squarespace:block-field id="{squarespace.page-id}-text" columns="12"/>
		</div>
	</div>
</div>
{.end}
<div class="content-container">
	<div class="flex-start-start event-type-toggles">
		<h2 id="upcoming-toggle" class="active-type-toggle type-toggle" onclick="toggleTypes('upcoming-toggle')">Upcoming Events </h2>
		<h2>&nbsp;/&nbsp; </h2>
		<h2 id="archive-toggle" class="type-toggle" onclick="toggleTypes('archive-toggle')">Archived Events </h2>
	</div>
	<div class="events flex-start-start">
		<div class="events-summary-list" style="width: 40%; height: 900px; overflow-y: scroll;">
			{.repeated section items}
			<div class="flex-center-center events-summary-container"  id="{id}" data-full-url="{fullUrl}" style="border: 0.25px solid black">
				<div class="events-summary" onclick="toggleEvent('{id}', '{fullUrl}')"  >
					<div class="events-summary-wrapper flex-center-center">
						<div class="event-summary-info">
							<div class="event-summary-wrapper flex-start-start">
								<div class="event-summary-title">
									<p>{structuredContent.startDate|date %B %d, %Y}</p>
									<h3 class="strong hover">{title}</h3>
									<div class="excerpt">
										<p id="trimmed-excerpt">{excerpt|truncate 220}</p>
									</div>
									<div class="flex-start-start">
										{.repeated section tags}
										<p class="tag">{@}</p>
										{.alternates with}&nbsp;
										{.end}
										{.if customContent.eventType}
										&nbsp;
										<p class="tag">Virtual Event</p>
										{.or}
										<p class="tag">In-Person Event</p>
										{.end}
									</div>
								</div>
							</div>
						</div>
					</div>
				</div>
			</div>
			<script>isDateInFutureOrPast(`{structuredContent.startDate|date %Y-%m-%dT%T}`, `{structuredContent.endDate|date %Y-%m-%dT%T}`, `{id}`)</script>
			{.end}	
		</div>
		<div class="events-full-size" style="width: 60%;">
			<div class="full-size-event" id="full-size-iframe">
				<iframe id="target-iframe" width="100%" height="900px"></iframe>	
			</div>
		</div>
	</div>
</div>
</div>
<script>
	var eventsSummaryDivs = document.getElementsByClassName('events-summary-container')
	console.log(eventsSummaryDivs.length)
	const firstChild = eventsSummaryDivs[0]
	const firstChildId = firstChild.id;
  const firstChildUrl = firstChild.dataset.fullUrl;
	const substringToRemove = '-summary';
	const modifiedString = firstChildId.replace(substringToRemove, '');
	console.log(modifiedString)
	toggleEvent(modifiedString, firstChildUrl)
</script>
